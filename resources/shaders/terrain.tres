[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;


uniform int max_altitude = 1;

uniform sampler2D heightmap;
uniform sampler2D normalmap;

uniform bool splatmap_0_enabled;
uniform sampler2D splatmap_0;

uniform bool red_0_enabled;
uniform int red_0_scale = 1;
uniform sampler2D red_0_diffuse;
uniform sampler2D red_0_normal;
uniform sampler2D red_0_roughness;
uniform sampler2D red_0_ao;

uniform bool green_0_enabled;
uniform int green_0_scale = 1;
uniform sampler2D green_0_diffuse;
uniform sampler2D green_0_normal;
uniform sampler2D green_0_roughness;
uniform sampler2D green_0_ao;

uniform bool blue_0_enabled;
uniform int blue_0_scale = 1;
uniform sampler2D blue_0_diffuse;
uniform sampler2D blue_0_normal;
uniform sampler2D blue_0_roughness;
uniform sampler2D blue_0_ao;

uniform bool alpha_0_enabled;
uniform int alpha_0_scale = 1;
uniform sampler2D alpha_0_diffuse;
uniform sampler2D alpha_0_normal;
uniform sampler2D alpha_0_roughness;
uniform sampler2D alpha_0_ao;


void vertex() {
	float height = texture(heightmap, UV).r;
	VERTEX.y = height * float(max_altitude);
}


vec3 get_albedo(vec4 value, vec2 uv) {
	vec3 albedo = vec3(0.0); 
	if (red_0_enabled == true) {
		albedo += texture(red_0_diffuse, uv * vec2(float(red_0_scale))).rgb * value.r;
	}
	if (green_0_enabled == true) {
		albedo += texture(green_0_diffuse, uv * vec2(float(green_0_scale))).rgb * value.g;
	}
	if (blue_0_enabled == true) {
		albedo += texture(blue_0_diffuse, uv * vec2(float(blue_0_scale))).rgb * value.b;
	}
	if (alpha_0_enabled == true) {
		albedo += texture(alpha_0_diffuse, uv * vec2(float(alpha_0_scale))).rgb * value.a;
	}
	return albedo;
}


vec3 get_normal(vec4 value, vec2 uv) {
	vec3 normal = vec3(0.0); 
	if (red_0_enabled == true) {
		normal += texture(red_0_normal, uv * vec2(float(red_0_scale))).rgb * value.r;
	}
	if (green_0_enabled == true) {
		normal += texture(green_0_normal, uv * vec2(float(green_0_scale))).rgb * value.g;
	}
	if (blue_0_enabled == true) {
		normal += texture(blue_0_normal, uv * vec2(float(blue_0_scale))).rgb * value.b;
	}
	if (alpha_0_enabled == true) {
		normal += texture(alpha_0_normal, uv * vec2(float(alpha_0_scale))).rgb * value.a;
	}
	return mix(texture(normalmap, uv).rgb, normal, 0.5);
}


float get_roughness(vec4 value, vec2 uv) {
	float roughness = 0.0;
	if (red_0_enabled == true) {
		roughness += texture(red_0_roughness, uv * vec2(float(red_0_scale))).r * value.r;
	}
	if (green_0_enabled == true) {
		roughness += texture(green_0_roughness, uv * vec2(float(green_0_scale))).r * value.g;
	}
	if (blue_0_enabled == true) {
		roughness += texture(blue_0_roughness, uv * vec2(float(blue_0_scale))).r * value.b;
	}
	if (alpha_0_enabled == true) {
		roughness += texture(alpha_0_roughness, uv * vec2(float(alpha_0_scale))).r * value.a;
	}
	return max(roughness, 1.0);
}


float get_ao(vec4 value, vec2 uv) {
	float ao = 0.0;
	if (red_0_enabled == true) {
		ao += texture(red_0_ao, uv * vec2(float(red_0_scale))).r * value.r;
	}
	if (red_0_enabled == true) {
		ao += texture(green_0_ao, uv * vec2(float(green_0_scale))).r * value.g;
	}
	if (red_0_enabled == true) {
		ao += texture(blue_0_ao, uv * vec2(float(blue_0_scale))).r * value.b;
	}
	if (red_0_enabled == true) {
		ao += texture(alpha_0_ao, uv * vec2(float(alpha_0_scale))).r * value.a;
	}
	return ao;
}


void fragment() {
	vec4 value = texture(splatmap_0, UV);
	vec3 normal = get_normal(value, UV); 
	
	ALBEDO = get_albedo(value, UV);
	NORMALMAP = normal;
	NORMALMAP_DEPTH = 2.0;
	ROUGHNESS = get_roughness(value, UV);
	AO = get_ao(value, UV);
}
"
