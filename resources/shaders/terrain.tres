[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;


uniform sampler2D heightmap;
uniform sampler2D normalmap;
uniform sampler2D splatmap;

uniform sampler2D red_diffuse;
uniform sampler2D red_normal;
uniform sampler2D red_roughness;
uniform sampler2D red_ao;
uniform int red_scale = 1;

uniform sampler2D green_diffuse;
uniform sampler2D green_normal;
uniform sampler2D green_roughness;
uniform sampler2D green_ao;
uniform int green_scale = 1;

uniform sampler2D blue_diffuse;
uniform sampler2D blue_normal;
uniform sampler2D blue_roughness;
uniform sampler2D blue_ao;
uniform int blue_scale = 1;

uniform int height_delta = 1;


void vertex() {
	float height = texture(heightmap, UV).r;
	VERTEX.y += height * float(height_delta);
}


void fragment() {
	mat3 albedo; 
	mat3 normal; 
	vec3 roughness; 
	vec3 ao;
	vec4 value = texture(splatmap, UV);
	
	albedo[0].rgb = texture(red_diffuse, UV * vec2(float(red_scale))).rgb * value.r;
	albedo[1].rgb = texture(green_diffuse, UV * vec2(float(green_scale))).rgb * value.g;
	albedo[2].rgb = texture(blue_diffuse, UV * vec2(float(blue_scale))).rgb * value.b;
	
	normal[0].rgb = texture(red_normal, UV * vec2(float(red_scale))).rgb * value.r;
	normal[1].rgb = texture(green_normal, UV * vec2(float(green_scale))).rgb * value.g;
	normal[2].rgb = texture(blue_normal, UV * vec2(float(blue_scale))).rgb * value.b;

	roughness.r = texture(red_roughness, UV * vec2(float(red_scale))).r * value.r;
	roughness.g = texture(green_roughness, UV * vec2(float(green_scale))).r * value.g;
	roughness.b = texture(blue_roughness, UV * vec2(float(blue_scale))).r * value.b;

	ao.r = texture(red_ao, UV * vec2(float(red_scale))).r * value.r;
	ao.g = texture(green_ao, UV * vec2(float(green_scale))).r * value.g;
	ao.b = texture(blue_ao, UV * vec2(float(blue_scale))).r * value.b;

	roughness = normalize(roughness);
	
	ALBEDO = albedo[0].rgb + albedo[1].rgb + albedo[2].rgb;
	NORMALMAP = texture(normalmap, UV).rgb + (normal[0].rgb + normal[1].rgb + normal[2].rgb);
	NORMALMAP_DEPTH = 1.0;
	ROUGHNESS = roughness.r + roughness.g + roughness.b;
	AO = ao.r + ao.g + ao.b;
}
"
