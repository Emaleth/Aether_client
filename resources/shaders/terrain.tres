[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode world_vertex_coords;

uniform int max_altitude = 1;
uniform float steepness = 0.55;
uniform float culling_max_distance = 100.0;

uniform sampler2D heightmap;
uniform sampler2D normalmap;
uniform sampler2D splatmap;

uniform float steepness_blend_amount = 0.1;
uniform float triplanar_scale = 1.0;

uniform sampler2D texture_flat_diffuse;
uniform sampler2D texture_flat_normal;
uniform sampler2D texture_flat_roughness;
uniform sampler2D texture_flat_ao;
//
uniform sampler2D texture_slope_diffuse;
uniform sampler2D texture_slope_normal;
uniform sampler2D texture_slope_roughness;
uniform sampler2D texture_slope_ao;

uniform sampler2D red_diffuse;
uniform sampler2D red_normal;
uniform sampler2D red_roughness;
uniform sampler2D red_ao;

uniform sampler2D green_diffuse;
uniform sampler2D green_normal;
uniform sampler2D green_roughness;
uniform sampler2D green_ao;

uniform sampler2D blue_diffuse;
uniform sampler2D blue_normal;
uniform sampler2D blue_roughness;
uniform sampler2D blue_ao;
//
varying vec3 uv_triplanar_pos;
varying vec3 uv_power_normal;
varying mat4 mdv_mx;
varying vec3 vtx;


bool distance_culling() {
	float z_dist = clamp((mdv_mx * vec4(vtx, 1.0)).z * -1.0,0.0, 2000.0 + 10.0);
	float x_dist = (mdv_mx * vec4(vtx, 1.0)).x;
	float dist = sqrt(z_dist * z_dist + x_dist * x_dist);
	if (dist > culling_max_distance || z_dist < 0.0) {
		return true;
	}
	else {
		return false;
	}
}

void vertex() {
	VERTEX.y = texture(heightmap, UV).r * float(max_altitude);
	mdv_mx = MODELVIEW_MATRIX;
	vtx = VERTEX;
	if (distance_culling()) {
		VERTEX = vec3(sqrt(-MODELVIEW_MATRIX[3][3]));
	} 
	else {
		uv_power_normal = pow(abs(mat3(WORLD_MATRIX) * NORMAL), vec3(1.0));
		uv_triplanar_pos = (WORLD_MATRIX * vec4(VERTEX, 1.0f)).xyz * triplanar_scale;
		uv_power_normal /= dot(uv_power_normal, vec3(1.0));
		uv_triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}


vec3 triplanar_texture(sampler2D p_sampler, vec3 p_triplanar_pos, vec3 p_weights) {
	vec3 samp = vec3(0.0);
	samp+= texture(p_sampler, p_triplanar_pos.xy).rgb * p_weights.z;
	samp+= texture(p_sampler, p_triplanar_pos.xz).rgb * p_weights.y;
	samp+= texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0,1.0)).rgb * p_weights.x;
	return samp;
}


vec3 get_albedo(float slope, vec4 value) {
	vec3 proc_albedo = vec3(0.0);
	vec3 splat_albedo = vec3(0.0);
	if (slope < steepness - steepness_blend_amount / 2.0) {
		proc_albedo = triplanar_texture(texture_flat_diffuse, uv_triplanar_pos, uv_power_normal).rgb;
	}
	else if (slope < steepness + steepness_blend_amount / 2.0) {
		float blend_amount =  (slope - (steepness - steepness_blend_amount / 2.0)) * (1.0f / ((steepness + steepness_blend_amount / 2.0) - (steepness - steepness_blend_amount / 2.0)));
		proc_albedo = mix(
			triplanar_texture(texture_flat_diffuse, uv_triplanar_pos, uv_power_normal).rgb,
			triplanar_texture(texture_slope_diffuse, uv_triplanar_pos, uv_power_normal).rgb,
			blend_amount);
	}
	else {
		proc_albedo = triplanar_texture(texture_slope_diffuse, uv_triplanar_pos, uv_power_normal).rgb;
	}
	// splatmap
	if (value.r > 0.0) {
		splat_albedo = mix(splat_albedo, triplanar_texture(red_diffuse, uv_triplanar_pos, uv_power_normal).rgb, value.r);
	}
	if (value.g > 0.0) {
		splat_albedo = mix(splat_albedo, triplanar_texture(green_diffuse, uv_triplanar_pos, uv_power_normal).rgb, value.g);
	}
	if (value.b > 0.0) {
		splat_albedo = mix(splat_albedo, triplanar_texture(blue_diffuse, uv_triplanar_pos, uv_power_normal).rgb, value.b);
	}

	return mix(proc_albedo, splat_albedo, value.a);
}


vec3 get_normal(float slope, vec3 terrain_normal, vec4 value) {
	vec3 proc_normal = vec3(0.0);
	vec3 splat_normal = vec3(0.0);
	if (slope < steepness - steepness_blend_amount / 2.0) {
		proc_normal = triplanar_texture(texture_flat_normal, uv_triplanar_pos, uv_power_normal).rgb;
	}
	else if (slope < steepness + steepness_blend_amount / 2.0) {
		float blend_amount =  (slope - (steepness - steepness_blend_amount / 2.0)) * (1.0f / ((steepness + steepness_blend_amount / 2.0) - (steepness - steepness_blend_amount / 2.0)));
		proc_normal = mix(
			triplanar_texture(texture_flat_normal, uv_triplanar_pos, uv_power_normal).rgb,
			triplanar_texture(texture_slope_normal, uv_triplanar_pos, uv_power_normal).rgb,
			blend_amount);
	}
	else {
		proc_normal = triplanar_texture(texture_slope_normal, uv_triplanar_pos, uv_power_normal).rgb;
	}
	if (value.r > 0.0) {
		splat_normal = mix(splat_normal, triplanar_texture(red_normal, uv_triplanar_pos, uv_power_normal).rgb, value.r);
	}
	if (value.g > 0.0) {
		splat_normal = mix(splat_normal, triplanar_texture(green_normal, uv_triplanar_pos, uv_power_normal).rgb, value.g);
	}
	if (value.b > 0.0) {
		splat_normal = mix(splat_normal, triplanar_texture(blue_normal, uv_triplanar_pos, uv_power_normal).rgb, value.b);
	}

	return mix(proc_normal, splat_normal, value.a);
}


float get_roughness(float slope, vec4 value) {
	float proc_roughness = 0.0;
	float splat_roughness = 0.0;
	if (slope < steepness - steepness_blend_amount / 2.0) {
		proc_roughness = triplanar_texture(texture_flat_roughness, uv_triplanar_pos, uv_power_normal).r;
	}
	else if (slope < steepness + steepness_blend_amount / 2.0) {
		float blend_amount =  (slope - (steepness - steepness_blend_amount / 2.0)) * (1.0f / ((steepness + steepness_blend_amount / 2.0) - (steepness - steepness_blend_amount / 2.0)));
		proc_roughness = mix(
			triplanar_texture(texture_flat_roughness, uv_triplanar_pos, uv_power_normal).r,
			triplanar_texture(texture_slope_roughness, uv_triplanar_pos, uv_power_normal).r,
			blend_amount);
	}
	else {
		proc_roughness = triplanar_texture(texture_slope_roughness, uv_triplanar_pos, uv_power_normal).r;
	}
	
	if (value.r > 0.0) {
		splat_roughness = mix(splat_roughness, triplanar_texture(red_roughness, uv_triplanar_pos, uv_power_normal).r, value.r);
	}
	if (value.g > 0.0) {
		splat_roughness = mix(splat_roughness, triplanar_texture(green_roughness, uv_triplanar_pos, uv_power_normal).r, value.g);
	}
	if (value.b > 0.0) {
		splat_roughness = mix(splat_roughness, triplanar_texture(blue_roughness, uv_triplanar_pos, uv_power_normal).r, value.b);
	}

	return max(mix(proc_roughness, splat_roughness, value.a), 1.0);
}


float get_ao(float slope, vec4 value) {
	float proc_ao = 0.0;
	float splat_ao = 0.0;
	if (slope < steepness - steepness_blend_amount / 2.0) {
		proc_ao = triplanar_texture(texture_flat_ao, uv_triplanar_pos, uv_power_normal).r;
	}
	else if (slope < steepness + steepness_blend_amount / 2.0) {
		float blend_amount =  (slope - (steepness - steepness_blend_amount / 2.0)) * (1.0f / ((steepness + steepness_blend_amount / 2.0) - (steepness - steepness_blend_amount / 2.0)));
		proc_ao = mix(
			triplanar_texture(texture_flat_ao, uv_triplanar_pos, uv_power_normal).r,
			triplanar_texture(texture_slope_ao, uv_triplanar_pos, uv_power_normal).r,
			blend_amount);
	}
	else {
		proc_ao = triplanar_texture(texture_slope_ao, uv_triplanar_pos, uv_power_normal).r;
	}
	if (value.r > 0.0) {
		splat_ao = mix(splat_ao, triplanar_texture(red_ao, uv_triplanar_pos, uv_power_normal).r, value.r);
	}
	if (value.g > 0.0) {
		splat_ao = mix(splat_ao, triplanar_texture(green_ao, uv_triplanar_pos, uv_power_normal).r, value.g);
	}
	if (value.b > 0.0) {
		splat_ao = mix(splat_ao, triplanar_texture(blue_ao, uv_triplanar_pos, uv_power_normal).r, value.b);
	}

	return mix(proc_ao, splat_ao, value.a);
}


void fragment() {
	vec3 normal = texture(normalmap, UV).rgb * 2.0 -1.0;
	float slope = acos(normal.z);
	vec4 value = texture(splatmap, UV);
	
	if (distance_culling()) {
		discard;
	}
	else {
		ALBEDO = get_albedo(slope, value);
		NORMALMAP = mix(texture(normalmap, UV).rgb, get_normal(slope, normal, value).rgb, 0.5);
		NORMALMAP_DEPTH = 2.0;
		ROUGHNESS = get_roughness(slope, value);
		AO = get_ao(slope, value);
		AO_LIGHT_AFFECT = 1.0;
	}
}
"
